#! /usr/bin/env python
# encoding: utf-8

from waflib import Utils
import os

top = '.'
PROJECT_NAME = 'cryptopp'

def options(opt):
	# stub
	return

def configure(conf):
	return

def build(bld):
	source = [
		'algebra.cpp',
		'algparam.cpp',
		'asn.cpp',
		'basecode.cpp',
		'cbcmac.cpp',
		'channels.cpp',
		'cryptlib.cpp',
		'des.cpp',
		'dessp.cpp',
		'dh.cpp',
		'dll.cpp',
		'dsa.cpp',
		'ec2n.cpp',
		'eccrypto.cpp',
		'ecp.cpp',
		'eprecomp.cpp',
		'files.cpp',
		'filters.cpp',
		'fips140.cpp',
		'fipstest.cpp',
		'gf2n.cpp',
		'gfpcrypt.cpp',
		'hex.cpp',
		'hmac.cpp',
		'integer.cpp',
		'iterhash.cpp',
		'misc.cpp',
		'modes.cpp',
		'mqueue.cpp',
		'nbtheory.cpp',
		'oaep.cpp',
		'osrng.cpp',
		'pch.cpp',
		'pkcspad.cpp',
		'pubkey.cpp',
		'queue.cpp',
		'randpool.cpp',
		'rdtables.cpp',
		'rijndael.cpp',
		'rng.cpp',
		'rsa.cpp',
		'sha.cpp',
		'simple.cpp',
		'skipjack.cpp',
		'strciphr.cpp',
		'trdlocal.cpp'
	]

	includes = [
		'.'
	]

	defines = []

	libs = []

	bld.stlib(
		source   = source,
		target   = PROJECT_NAME,
		name     = PROJECT_NAME,
		features = 'c cxx',
		includes = includes,
		defines  = defines,
		use      = libs,
		subsystem = bld.env.MSVC_SUBSYSTEM,
		idx      = bld.get_taskgen_count()
	)

